//
//  SceneDelegate.swift
//  Health
//
//  Created by ÍπÄÍ±¥Ïö∞ on 7/28/25.
//

import UIKit
import WidgetKit

class SceneDelegate: UIResponder, UIWindowSceneDelegate {

    var window: UIWindow?

    @Injected private var healthService: (any HealthService)
    @Injected private var stepSyncService: (any StepSyncService)
    
    private var hkSharingAutorizationStatus: Bool = false
	private var motionAgg: ForegroundMotionAggregator?
	
    func scene(_ scene: UIScene,
               willConnectTo session: UISceneSession,
               options connectionOptions: UIScene.ConnectionOptions) {
		print(SharedStore.suiteID)
        guard let windowScene = (scene as? UIWindowScene) else { return }
        window = UIWindow(windowScene: windowScene)
        
        initializeHKSharingAuthorizationStatus()
        let hasSeenOnboarding = UserDefaultsWrapper.shared.hasSeenOnboarding
        
        
        window?.rootViewController = setupRootViewController(hasSeenOnboarding: hasSeenOnboarding)
        window?.makeKeyAndVisible()
    }

    func sceneDidDisconnect(_ scene: UIScene) {
    }
	
	func sceneDidBecomeActive(_ scene: UIScene) {
		// TODO: Ïù¥ÏÉÅ ÏóÜÏúºÎ©¥ ÏÇ≠Ï†úÌï† Î°úÍ∑∏ - Ïï± Í∑∏Î£π Í∞ÅÏûê ÏÑ§Ï†ïÌïú ID Ïûò Îì§Ïñ¥Í∞ÄÏûàÎäî Ï≤¥ÌÅ¨ÌïòÍ∏∞ ÏúÑÌïú ÏûÑÏãú Ïö©ÎèÑ
		// App Group Ïª®ÌÖåÏù¥ÎÑà ÌôïÏù∏
		let id  = SharedStore.suiteID
		let url = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: id)
		print("üì¶ [APP] groupID=\(id), url=\(url?.path ?? "nil")")
		
		// Ïò®Î≥¥Îî© Ïù¥Ï†ÑÏóî Ï†àÎåÄ HealthKit Í∂åÌïú ÏöîÏ≤≠/Ï†ëÍ∑º Ïïà Ìï®
		guard UserDefaultsWrapper.shared.hasSeenOnboarding else {
			print("‚ÑπÔ∏è Onboarding not finished. Skip Health snapshot.")
			return
		}
		
		Task {
			if await healthService.checkHasAnyReadPermission() {
				await DashboardSnapshotStore.updateFromHealthKit()
				print("üü¢ widget snapshot updated from HealthKit")
			} else {
				print("‚ö†Ô∏è Health permission not granted, skip snapshot")
			}
		}
	}

    func sceneWillResignActive(_ scene: UIScene) {
		motionAgg?.stop()
		motionAgg = nil
    }

	func sceneWillEnterForeground(_ scene: UIScene) {
		Task { @MainActor in
			// ÎßàÏßÄÎßâÏóê Î¨¥Ï°∞Í±¥ Ïã§Ìñâ (ÎÖ∏Ìã∞ Ï†ÑÌååÎäî Ïó∞Í∏∞) - Í∂åÌïú Í¥ÄÎ†® ÏÉÅÌÉú Í∞±Ïã† ÏúÑÌï¥ÏÑú ÏûàÎäî Î∂ÄÎ∂Ñ
			defer { refreshHKSharingAuthorizationStatus() }
			
			if UserDefaultsWrapper.shared.hasSeenOnboarding {
				syncSteps()
				
				if await healthService.checkHasAnyReadPermission() {
					await DashboardSnapshotStore.updateFromHealthKit()
					print("üü¢ foreground snapshot updated")
				} else {
					print("‚ö†Ô∏è Health permission not granted (foreground), skip snapshot")
				}
			}
		}
		// TODO: Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌïú Í≤ΩÏö∞ Í∏∞Ï°¥ ÏÑ§Ï†ïÌï¥ÎíÄÎçò ÏΩîÎìúÎ°ú ÎêòÎèåÎ¶¨Í∏∞ ÏúÑÌïú ÏûÑÏãú Ï£ºÏÑùÏûÖÎãàÎã§.(Ïù¥ÏÉÅÏù¥ ÏóÜÎã§Î©¥ Î∞îÎ°ú ÏÇ≠Ï†ú ÏòàÏ†ï)
//		if UserDefaultsWrapper.shared.hasSeenOnboarding {
//			syncSteps()
//			Task {
//				if await healthService.checkHasAnyReadPermission() { // ÏÉÅÌÉú Ï†êÍ≤Ä(ÌåùÏóÖ ÏóÜÏùå)
//					await DashboardSnapshotStore.updateFromHealthKit()
//					print("üü¢ foreground snapshot updated")
//				} else {
//					print("‚ö†Ô∏è Health permission not granted (foreground), skip snapshot")
//				}
//			}
//		}
//		
//        refreshHKSharingAuthorizationStatus()
		
    }

    func sceneDidEnterBackground(_ scene: UIScene) {
    }
}

private extension SceneDelegate {

    func setupRootViewController(hasSeenOnboarding: Bool) -> UIViewController {
        if hasSeenOnboarding {
            let storyboard = UIStoryboard(name: "Main", bundle: nil)
            guard let vc = storyboard.instantiateInitialViewController() else {
                fatalError("Main.storyboard Ï¥àÍ∏∞ Î∑∞Ïª®Ìä∏Î°§Îü¨ ÏóÜÏùå")
            }
            return vc
        } else {
            let containerVC = ProgressContainerViewController()

            let onboardingStoryboard = UIStoryboard(name: "Onboarding", bundle: nil)
            guard let navController = onboardingStoryboard.instantiateInitialViewController() as? UINavigationController else {
                fatalError("Onboarding.storyboard Ï¥àÍ∏∞ Î∑∞Ïª®Ìä∏Î°§Îü¨Í∞Ä UINavigationControllerÍ∞Ä ÏïÑÎãò")
            }
            guard navController.viewControllers.first is OnboardingViewController else {
                fatalError("UINavigationController Î£®Ìä∏Í∞Ä OnboardingViewControllerÍ∞Ä ÏïÑÎãò")
            }

            containerVC.setChildViewController(navController)

            return containerVC
        }
    }

    func syncSteps() {
        Task {
            do {
                try await stepSyncService.syncSteps()
				do {
					let snap = try await DefaultDashboardSnapshotProvider().makeSnapshot(for: .now)
					DashboardSnapshotStore.saveAndNotify(snap)
				} catch {
					print("üî¥ Widget snapshot update failed:", error)
				}
            } catch {
                print("Í±∏Ïùå Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî Ïã§Ìå®: \(error.localizedDescription)")
            }
        }
    }
}


fileprivate extension SceneDelegate {
    
    func initializeHKSharingAuthorizationStatus() {
        Task {
            hkSharingAutorizationStatus = await healthService.checkHasAnyReadPermission()
        }
    }
    
    func refreshHKSharingAuthorizationStatus() {
        Task {
            let refreshedHKSharingAuthorizationStatus = await healthService.checkHasAnyReadPermission()
            if hkSharingAutorizationStatus != refreshedHKSharingAuthorizationStatus {
                hkSharingAutorizationStatus = refreshedHKSharingAuthorizationStatus
                postHKSharingAuthorizationStatusDidChangeNotification(for: hkSharingAutorizationStatus)
            }
        }
    }
    
    func postHKSharingAuthorizationStatusDidChangeNotification(for status: Bool) {
        NotificationCenter.default.post(
            name: .didChangeHKSharingAuthorizationStatus,
            object: nil,
            userInfo: [.status: status]
        )
        print("üîä Post HKSharingAuthorizationStatusdidChangeNotification - (status: \(status))")
    }
}
